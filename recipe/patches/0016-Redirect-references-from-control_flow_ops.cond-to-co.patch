From 5876c8a76d24660552e5d703508194a92d4fabd2 Mon Sep 17 00:00:00 2001
From: Fiona Lang <flang@google.com>
Date: Wed, 15 Mar 2023 23:04:22 -0700
Subject: [PATCH 16/30] Redirect references from `control_flow_ops.cond` to
 `cond.cond`.

This is to ultimately remove the circular dependencies that pass from `control_flow_ops.py` to `cond_v2.py`.

PiperOrigin-RevId: 517030581
Change-Id: Ib8bd5df8ffb4a91e46be6b3d1259efcb240bf9ba
---
 tf_slim/data/tfexample_decoder.py |  6 +++---
 tf_slim/layers/utils.py           |  4 ++--
 tf_slim/metrics/metric_ops.py     | 17 +++++++++--------
 3 files changed, 14 insertions(+), 13 deletions(-)

diff --git a/tf_slim/data/tfexample_decoder.py b/tf_slim/data/tfexample_decoder.py
index e58fcc8..7be7f44 100644
--- a/tf_slim/data/tfexample_decoder.py
+++ b/tf_slim/data/tfexample_decoder.py
@@ -36,8 +36,8 @@ from tensorflow.python.framework import sparse_tensor
 from tensorflow.python.ops import array_ops
 from tensorflow.python.ops import array_ops_stack
 from tensorflow.python.ops import check_ops
+from tensorflow.python.ops import cond
 from tensorflow.python.ops import control_flow_case
-from tensorflow.python.ops import control_flow_ops
 from tensorflow.python.ops import image_ops
 from tensorflow.python.ops import map_fn
 from tensorflow.python.ops import math_ops
@@ -277,7 +277,7 @@ class BackupHandler(ItemHandler):
 
   def tensors_to_item(self, keys_to_tensors):
     item = self._handler.tensors_to_item(keys_to_tensors)
-    return control_flow_ops.cond(
+    return cond.cond(
         pred=math_ops.equal(math_ops.reduce_prod(array_ops.shape(item)), 0),
         true_fn=lambda: self._backup.tensors_to_item(keys_to_tensors),
         false_fn=lambda: item)
@@ -438,7 +438,7 @@ class Image(ItemHandler):
       """Checks if an image is jpeg."""
       # For jpeg, we directly use image_ops.decode_jpeg rather than decode_image
       # in order to feed the jpeg specify parameter 'dct_method'.
-      return control_flow_ops.cond(
+      return cond.cond(
           image_ops.is_jpeg(image_buffer),
           decode_jpeg,
           decode_image,
diff --git a/tf_slim/layers/utils.py b/tf_slim/layers/utils.py
index 8c9e28b..5a4a664 100644
--- a/tf_slim/layers/utils.py
+++ b/tf_slim/layers/utils.py
@@ -26,7 +26,7 @@ from collections import OrderedDict
 from tensorflow.python.framework import ops
 from tensorflow.python.framework import tensor_shape
 from tensorflow.python.framework import tensor_util
-from tensorflow.python.ops import control_flow_ops
+from tensorflow.python.ops import cond
 from tensorflow.python.ops import variables
 
 __all__ = ['collect_named_outputs',
@@ -217,7 +217,7 @@ def smart_cond(pred, fn1, fn2, name=None):
     return static_cond(pred_value, fn1, fn2)
   else:
     # Use dynamic cond otherwise.
-    return control_flow_ops.cond(pred, fn1, fn2, name)
+    return cond.cond(pred, fn1, fn2, name)
 
 
 def get_variable_collections(variables_collections, name):
diff --git a/tf_slim/metrics/metric_ops.py b/tf_slim/metrics/metric_ops.py
index d87afb3..ded2f25 100644
--- a/tf_slim/metrics/metric_ops.py
+++ b/tf_slim/metrics/metric_ops.py
@@ -28,6 +28,7 @@ from tensorflow.python.framework import ops
 from tensorflow.python.ops import array_ops
 from tensorflow.python.ops import array_ops_stack  # pylint: disable=g-direct-tensorflow-import
 from tensorflow.python.ops import check_ops
+from tensorflow.python.ops import cond
 from tensorflow.python.ops import confusion_matrix
 from tensorflow.python.ops import control_flow_ops
 from tensorflow.python.ops import math_ops
@@ -1129,7 +1130,7 @@ def _compute_dynamic_auc(labels, predictions, curve='ROC', weights=None):
 
   # If all the labels are the same, AUC isn't well-defined (but raising an
   # exception seems excessive) so we return 0, otherwise we finish computing.
-  return control_flow_ops.cond(
+  return cond.cond(
       math_ops.logical_or(
           math_ops.equal(total_positive, 0),
           math_ops.equal(total_positive, total_weight)),
@@ -1388,7 +1389,7 @@ def _compute_placement_auc(labels, predictions, weights, alpha,
   # exception seems excessive) so we return 0, otherwise we finish computing.
   trivial_value = array_ops.constant(0.0)
 
-  return AucData(*control_flow_ops.cond(
+  return AucData(*cond.cond(
       is_valid, lambda: [auc, lower, upper], lambda: [trivial_value] * 3))
 
 
@@ -1492,7 +1493,7 @@ def auc_with_confidence_intervals(labels,
       is_valid = math_ops.logical_and(all_labels_positive_or_0,
                                       sums_of_weights_at_least_1)
 
-      update_op = control_flow_ops.cond(
+      update_op = cond.cond(
           sums_of_weights_at_least_1, lambda: update_op_for_valid_case,
           control_flow_ops.no_op)
 
@@ -2546,8 +2547,8 @@ def _compute_recall_at_precision(tp, fp, fn, precision, name,
       return math_ops.div(tp[tf_index], tp[tf_index] + fn[tf_index] + _EPSILON,
                           name)
 
-    return control_flow_ops.cond(precisions[tf_index] >= precision,
-                                 _return_good_recall, lambda: .0)
+    return cond.cond(precisions[tf_index] >= precision,
+                     _return_good_recall, lambda: .0)
 
 
 def recall_at_precision(labels,
@@ -3643,9 +3644,9 @@ def streaming_concat(values,
 
     new_size = size + batch_size
     array_size = array_ops.shape_internal(array, optimize=False)[0]
-    maybe_reallocate_op = control_flow_ops.cond(new_size > array_size,
-                                                reallocate,
-                                                control_flow_ops.no_op)
+    maybe_reallocate_op = cond.cond(new_size > array_size,
+                                    reallocate,
+                                    control_flow_ops.no_op)
     with ops.control_dependencies([maybe_reallocate_op]):
       append_values_op = array[size:new_size].assign(batch_values)
     with ops.control_dependencies([append_values_op]):
-- 
2.40.1

