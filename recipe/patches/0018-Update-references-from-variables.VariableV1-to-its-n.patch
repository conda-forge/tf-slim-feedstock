From f67a0b4412c9a15b08fe0ed6daa9c95656751a6d Mon Sep 17 00:00:00 2001
From: Fiona Lang <flang@google.com>
Date: Wed, 29 Mar 2023 15:48:27 -0700
Subject: [PATCH 18/30] Update references from `variables.VariableV1` to its
 new location in `ops/variable_v1.py`.

PiperOrigin-RevId: 520463538
Change-Id: I37f2a73375328d1b2bdb6ad537d5a38cb0e01d3c
---
 pip_pkg.sh                         |  2 +-
 tests_release.sh                   |  2 +-
 tf_slim/metrics/metric_ops_test.py | 15 +++++-----
 tf_slim/ops/variables_test.py      | 47 +++++++++++++++---------------
 4 files changed, 34 insertions(+), 32 deletions(-)

diff --git a/pip_pkg.sh b/pip_pkg.sh
index 37fdbd4..9989b0e 100755
--- a/pip_pkg.sh
+++ b/pip_pkg.sh
@@ -1,4 +1,4 @@
-# Copyright 2022 The TF-Slim Authors.
+# Copyright 2023 The TF-Slim Authors.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
diff --git a/tests_release.sh b/tests_release.sh
index 695bcf9..6b0f533 100755
--- a/tests_release.sh
+++ b/tests_release.sh
@@ -1,4 +1,4 @@
-# Copyright 2022 The TF-Slim Authors.
+# Copyright 2023 The TF-Slim Authors.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
diff --git a/tf_slim/metrics/metric_ops_test.py b/tf_slim/metrics/metric_ops_test.py
index fad934d..a5fe9e8 100644
--- a/tf_slim/metrics/metric_ops_test.py
+++ b/tf_slim/metrics/metric_ops_test.py
@@ -40,6 +40,7 @@ from tensorflow.python.ops import data_flow_ops
 from tensorflow.python.ops import math_ops
 from tensorflow.python.ops import random_ops
 from tensorflow.python.ops import variable_scope
+from tensorflow.python.ops import variable_v1
 from tensorflow.python.ops import variables
 
 
@@ -2085,11 +2086,11 @@ class StreamingDynamicAUCTest(tf1.test.TestCase):
     num_batches = 100
     labels = np.array([])
     predictions = np.array([])
-    tf_labels = variables.VariableV1(
+    tf_labels = variable_v1.VariableV1(
         array_ops.ones(batch_size, dtypes_lib.int32),
         collections=[ops.GraphKeys.LOCAL_VARIABLES],
         dtype=dtypes_lib.int32)
-    tf_predictions = variables.VariableV1(
+    tf_predictions = variable_v1.VariableV1(
         array_ops.ones(batch_size),
         collections=[ops.GraphKeys.LOCAL_VARIABLES],
         dtype=dtypes_lib.float32)
@@ -2149,15 +2150,15 @@ class StreamingDynamicAUCTest(tf1.test.TestCase):
     labels = np.array([])
     predictions = np.array([])
     weights = np.array([])
-    tf_labels = variables.VariableV1(
+    tf_labels = variable_v1.VariableV1(
         array_ops.ones(batch_size, dtypes_lib.int32),
         collections=[ops.GraphKeys.LOCAL_VARIABLES],
         dtype=dtypes_lib.int32)
-    tf_predictions = variables.VariableV1(
+    tf_predictions = variable_v1.VariableV1(
         array_ops.ones(batch_size),
         collections=[ops.GraphKeys.LOCAL_VARIABLES],
         dtype=dtypes_lib.float32)
-    tf_weights = variables.VariableV1(
+    tf_weights = variable_v1.VariableV1(
         array_ops.ones(batch_size),
         collections=[ops.GraphKeys.LOCAL_VARIABLES],
         dtype=dtypes_lib.float32)
@@ -2328,11 +2329,11 @@ class AucWithConfidenceIntervalsTest(tf1.test.TestCase):
     num_batches = 100
     labels = np.array([])
     predictions = np.array([])
-    tf_labels = variables.VariableV1(
+    tf_labels = variable_v1.VariableV1(
         array_ops.ones(batch_size, dtypes_lib.int32),
         collections=[ops.GraphKeys.LOCAL_VARIABLES],
         dtype=dtypes_lib.int32)
-    tf_predictions = variables.VariableV1(
+    tf_predictions = variable_v1.VariableV1(
         array_ops.ones(batch_size),
         collections=[ops.GraphKeys.LOCAL_VARIABLES],
         dtype=dtypes_lib.float32)
diff --git a/tf_slim/ops/variables_test.py b/tf_slim/ops/variables_test.py
index 9f127eb..589f951 100644
--- a/tf_slim/ops/variables_test.py
+++ b/tf_slim/ops/variables_test.py
@@ -41,6 +41,7 @@ from tensorflow.python.ops import nn_ops
 from tensorflow.python.ops import partitioned_variables
 from tensorflow.python.ops import resource_variable_ops
 from tensorflow.python.ops import variable_scope
+from tensorflow.python.ops import variable_v1
 from tensorflow.python.ops import variables as variables_lib
 from tensorflow.python.platform import gfile
 from tensorflow.python.platform import test
@@ -212,7 +213,7 @@ class GlobalStepTest(test.TestCase):
   def test_invalid_dtype(self):
     with ops.Graph().as_default() as g:
       self.assertEqual(None, variables_lib2.get_global_step())
-      variables_lib.VariableV1(
+      variable_v1.VariableV1(
           0.0,
           trainable=False,
           dtype=dtypes.float32,
@@ -225,14 +226,14 @@ class GlobalStepTest(test.TestCase):
   def test_invalid_shape(self):
     with ops.Graph().as_default() as g:
       self.assertEqual(None, variables_lib2.get_global_step())
-      variables_lib.VariableV1(
-          [0],
-          trainable=False,
-          dtype=dtypes.int32,
-          name=ops.GraphKeys.GLOBAL_STEP,
-          collections=[ops.GraphKeys.GLOBAL_VARIABLES,
-                       ops.GraphKeys.GLOBAL_STEP]
-      )
+      variable_v1.VariableV1([0],
+                             trainable=False,
+                             dtype=dtypes.int32,
+                             name=ops.GraphKeys.GLOBAL_STEP,
+                             collections=[
+                                 ops.GraphKeys.GLOBAL_VARIABLES,
+                                 ops.GraphKeys.GLOBAL_STEP
+                             ])
       self.assertRaisesRegexp(TypeError, 'not scalar',
                               variables_lib2.get_global_step)
     self.assertRaisesRegexp(TypeError, 'not scalar',
@@ -252,14 +253,14 @@ class GlobalStepTest(test.TestCase):
   def test_get_global_step(self):
     with ops.Graph().as_default() as g:
       self.assertEqual(None, variables_lib2.get_global_step())
-      variables_lib.VariableV1(
+      variable_v1.VariableV1(
           0,
           trainable=False,
           dtype=dtypes.int32,
           name=ops.GraphKeys.GLOBAL_STEP,
-          collections=[ops.GraphKeys.GLOBAL_VARIABLES,
-                       ops.GraphKeys.GLOBAL_STEP]
-      )
+          collections=[
+              ops.GraphKeys.GLOBAL_VARIABLES, ops.GraphKeys.GLOBAL_STEP
+          ])
       self._assert_global_step(
           variables_lib2.get_global_step(), expected_dtype=dtypes.int32)
     self._assert_global_step(
@@ -635,10 +636,10 @@ class ModelVariablesTest(test.TestCase):
     with self.cached_session():
       with variable_scope.variable_scope('A'):
         variables_lib2.local_variable([5])
-        a = variables_lib.VariableV1([5])
+        a = variable_v1.VariableV1([5])
       with variable_scope.variable_scope('B'):
         variables_lib2.local_variable([5])
-        b = variables_lib.VariableV1([5])
+        b = variable_v1.VariableV1([5])
       self.assertEqual([a], variables_lib2.get_trainable_variables('A'))
       self.assertEqual([b], variables_lib2.get_trainable_variables('B'))
 
@@ -982,7 +983,7 @@ class AssignFromCheckpointTest(test.TestCase):
       # Create a set of variables to save in the checkpoint.
       for var_name in var_names_to_values:
         var_value = var_names_to_values[var_name]
-        var_list.append(variables_lib.VariableV1(var_value, name=var_name))
+        var_list.append(variable_v1.VariableV1(var_value, name=var_name))
       saver = saver_lib.Saver(var_list)
       init_op = variables_lib.variables_initializer(var_list)
       sess.run(init_op)
@@ -1129,7 +1130,7 @@ class AssignFromCheckpointFnTest(test.TestCase):
       # Create a set of variables to save in the checkpoint.
       for var_name in var_names_to_values:
         var_value = var_names_to_values[var_name]
-        var_list.append(variables_lib.VariableV1(var_value, name=var_name))
+        var_list.append(variable_v1.VariableV1(var_value, name=var_name))
       saver = saver_lib.Saver(var_list)
       init_op = variables_lib.variables_initializer(var_list)
       sess.run(init_op)
@@ -1318,12 +1319,12 @@ class FilterVariablesTest(test.TestCase):
     g = ops.Graph()
     with g.as_default():
       var_list = []
-      var_list.append(variables_lib.VariableV1(0, name='conv1/weights'))
-      var_list.append(variables_lib.VariableV1(0, name='conv1/biases'))
-      var_list.append(variables_lib.VariableV1(0, name='conv2/weights'))
-      var_list.append(variables_lib.VariableV1(0, name='conv2/biases'))
-      var_list.append(variables_lib.VariableV1(0, name='clfs/weights'))
-      var_list.append(variables_lib.VariableV1(0, name='clfs/biases'))
+      var_list.append(variable_v1.VariableV1(0, name='conv1/weights'))
+      var_list.append(variable_v1.VariableV1(0, name='conv1/biases'))
+      var_list.append(variable_v1.VariableV1(0, name='conv2/weights'))
+      var_list.append(variable_v1.VariableV1(0, name='conv2/biases'))
+      var_list.append(variable_v1.VariableV1(0, name='clfs/weights'))
+      var_list.append(variable_v1.VariableV1(0, name='clfs/biases'))
       self._var_list = var_list
 
   def _test_filter_variables(self,
-- 
2.40.1

